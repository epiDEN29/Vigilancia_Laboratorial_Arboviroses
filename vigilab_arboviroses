import pandas as pd
from datetime import timedelta, datetime

# ler data frame
file_path = 'data.xlsx'
dados = pd.read_excel(file_path)

# Converter coluna de data para datetime logo no início
dados['Data de Cadastro'] = pd.to_datetime(dados['Data de Cadastro'])

# Filtrar dados apenas de 2025 criando uma cópia explícita
dados_2025 = dados[dados['Data de Cadastro'] >= datetime(2025, 1, 1)].copy()

# Função para processar dados por período de 7 dias
def processar_por_periodo(dados, agravo):
    # Definir data inicial fixa como 01/01/2025
    data_inicial = datetime(2025, 1, 1)
    data_final = dados['Data de Cadastro'].max()
    
    # Criar períodos de 7 dias
    periodos = []
    data_atual = data_inicial
    while data_atual <= data_final:
        periodo_fim = data_atual + timedelta(days=6)
        periodos.append((data_atual, periodo_fim))
        data_atual += timedelta(days=7)
    
    # Dicionário para armazenar resultados por período
    resultados_periodo = {}
    
    # Processar cada período
    for inicio, fim in periodos:
        # Filtrar dados do período
        dados_periodo = dados[(dados['Data de Cadastro'] >= inicio) & 
                            (dados['Data de Cadastro'] <= fim)].copy()
        
        # Processar dados do período apenas se houver dados
        if not dados_periodo.empty:
            resultados = processar_dados_agravo(dados_periodo, agravo)
            
            # Armazenar resultados
            periodo_str = f"{inicio.strftime('%d/%m/%Y')} - {fim.strftime('%d/%m/%Y')}"
            resultados_periodo[periodo_str] = resultados.loc['Total']
    
    # Criar DataFrame com resultados por período
    df_periodos = pd.DataFrame.from_dict(resultados_periodo, orient='index')
    
    return df_periodos

# Função para processar e filtrar os dados para um agravo específico
def processar_dados_agravo(dados, agravo):
    filtrados = dados.loc[dados['Agravo da Requisição'].str.contains(agravo, case=False, na=False)].copy()
    
    # deletando linhas com resultados vazios
    filtrados.drop(filtrados.loc[filtrados['Status Exame'] == 'Aguardando Triagem'].index, inplace=True)
    filtrados.drop(filtrados.loc[filtrados['Status Exame'] == 'Disponível para encaminhar'].index, inplace=True)
    filtrados.drop(filtrados.loc[filtrados['Status Exame'] == 'Exame Cancelado'].index, inplace=True)
    filtrados.drop(filtrados.loc[filtrados['Status Exame'] == 'Exame em Análise'].index, inplace=True)
    filtrados.drop(filtrados.loc[filtrados['Status Exame'] == 'Exame não-realizado'].index, inplace=True)
    filtrados.drop(filtrados.loc[filtrados['1º Campo Resultado'] == 'Diagnóstico Diferencial: Não'].index, inplace=True)
    
    # retirando espaços das strings de resultados
    filtrados['1º Campo Resultado'] = filtrados['1º Campo Resultado'].str.strip()

    # Contar os resultados e colocá-los em colunas
    contagem_resultados = filtrados.pivot_table(index='Municipio do Solicitante', 
                                                columns='1º Campo Resultado', 
                                                values='Requisição', 
                                                aggfunc='count', 
                                                fill_value=0)
    
    # somando número de exames concluídos, conforme número de resultados entregues
    contagem_resultados['Amostras Enviadas'] = contagem_resultados.sum(axis=1)
    
    # Coluna 'Inconclusivas'
    contagem_resultados['Inconclusivas'] = contagem_resultados.get('Dengue: Inconclusivo', 0) + \
                                           contagem_resultados.get('Resultado: Inconclusivo', 0)
    
    # Coluna 'Indeterminadas'
    contagem_resultados['Indeterminadas'] = contagem_resultados.get('Resultado: Indeterminado', 0)

    # Coluna 'Não Reagente'
    contagem_resultados['Não Reagentes'] = contagem_resultados.get('Resultado: Não Reagente', 0)

    # Coluna 'Reagente'
    contagem_resultados['Reagentes'] = contagem_resultados.get('Resultado: Reagente', 0)

    # Coluna 'Não Detectável'
    contagem_resultados['Não Detectáveis'] = contagem_resultados.get('Resultado: Não Detectável', 0) + \
                                            contagem_resultados.get('Dengue: Não Detectável', 0)
    
    # Coluna 'Detectável'
    contagem_resultados['Detectáveis'] = contagem_resultados.get('Resultado: Detectável', 0) + \
                                            contagem_resultados.get('Dengue: Detectável', 0)
    
    # Coluna 'Total Positivas'
    contagem_resultados['Total Positivas'] = contagem_resultados.get('Resultado: Reagente', 0) + \
                                             contagem_resultados.get('Dengue: Detectável', 0) + \
                                             contagem_resultados.get('Resultado: Detectável', 0)
    
    # Adicionando uma coluna para o percentual de positividade dos exames por município do solicitante
    contagem_resultados['Positividade (%)'] = (contagem_resultados['Total Positivas'] / contagem_resultados['Amostras Enviadas']) * 100

    # Limitando o percentual a duas casas decimais
    contagem_resultados['Positividade (%)'] = contagem_resultados['Positividade (%)'].round(2)

    # Adiciona uma linha 'Total' que é a soma dos valores de cada coluna individualmente
    contagem_resultados.loc['Total'] = contagem_resultados.sum(numeric_only=True)
    
    # Organize as colunas de acordo com o valor total, do maior para o menor
    contagem_resultados = contagem_resultados[contagem_resultados.loc['Total'].sort_values(ascending=False).index]
    
    # Define colunas na ordem desejada
    ordered_columns = ['Amostras Enviadas', 
                       'Inconclusivas', 'Indeterminadas', 
                       'Não Reagentes', 'Reagentes', 'Não Detectáveis',
                       'Detectáveis', 'Total Positivas', 'Positividade (%)']
    
    contagem_resultados = contagem_resultados.reindex(columns=ordered_columns)
    
    return contagem_resultados

# Filtrar dados apenas de 2025 antes de processar
dados['Data de Cadastro'] = pd.to_datetime(dados['Data de Cadastro'])
dados_2025 = dados[dados['Data de Cadastro'] >= datetime(2025, 1, 1)]

# Processando dados para cada agravo por período
df_dengue_periodos = processar_por_periodo(dados_2025, 'DENGUE')
df_zika_periodos = processar_por_periodo(dados_2025, 'ZIKA')
df_chikungunya_periodos = processar_por_periodo(dados_2025, 'CHIKUNGUNYA')

# Processando dados totais apenas para 2025
df_dengue = processar_dados_agravo(dados_2025, 'DENGUE')
df_zika = processar_dados_agravo(dados_2025, 'ZIKA')
df_chikungunya = processar_dados_agravo(dados_2025, 'CHIKUNGUNYA')

# Salvando os resultados
output_path = 'Total_VigiLab_Urbanas_2025.xlsx'

with pd.ExcelWriter(output_path) as writer:
    # Salvando resultados totais
    df_dengue.to_excel(writer, sheet_name='DENGUE')
    df_chikungunya.to_excel(writer, sheet_name='CHIKUNGUNYA')
    df_zika.to_excel(writer, sheet_name='ZIKA')
    
    # Salvando resultados por período
    df_dengue_periodos.to_excel(writer, sheet_name='DENGUE_PERIODOS')
    df_chikungunya_periodos.to_excel(writer, sheet_name='CHIKUNGUNYA_PERIODOS')
    df_zika_periodos.to_excel(writer, sheet_name='ZIKA_PERIODOS')

print(f"Tabela salva com sucesso!")
print(f"Desenvolvido por Pedro Araújo")
